#ifndef ELEVATOR_H
#define ELEVATOR_H

//#define STRING_POT
#define NO_STRING_POT

class Elevator
{
public:
	enum ElevatorState {kAutoMovingDown = -1, kStopped, kAutoMovingUp, kManualMove};

	Elevator(LHSJoystick*, Potentiometer*, Talon*, Drive*);
	~Elevator();
	void UpdateElevator();
	void PotentiometerTest();
	bool ApproachTote();
	bool PickUpTote();
	void TestElevator();
	void ToteLevel(ElevatorState);
	void AddToteToStack();

private:
	LHSJoystick* mXbox;
	Talon* mElevatorMotor;
	Potentiometer* mPot;
	ElevatorState mElevatorState;
	Drive* mDriveClass;
	int mToteStop;
};

Elevator::Elevator(LHSJoystick* pXbox, Potentiometer* pPot, Talon* pElevatorMotor, Drive* pDriveClass)
{
	printf("File %18s Date %s Time %s Object %p\n",__FILE__,__DATE__, __TIME__, this);
	mXbox = pXbox;
	mPot = pPot;
	mElevatorMotor = pElevatorMotor;
	mElevatorState = kStopped;
	mDriveClass = pDriveClass;
	mToteStop = 0;
}

Elevator::~Elevator()
{
	delete mDriveClass;
	mDriveClass = NULL;
	delete mElevatorMotor;
	mElevatorMotor = NULL;
	delete mPot;
	mPot = NULL;
	delete mXbox;
	mXbox = NULL;
}

void Elevator::PotentiometerTest()
{
	printf ("%f\n", mPot->Get());
}

void Elevator::UpdateElevator()
{
	double leftY = mXbox->GetRawAxis(XBOX_RIGHT_Y_AXIS);
	double leftTriggerDown = mXbox->GetRawAxis(XBOX_LEFT_TRIGGER_AXIS);
	double rightTriggerUp = mXbox->GetRawAxis(XBOX_RIGHT_TRIGGER_AXIS);
	double toteHeight = mPot->Get();

	if(fabs(leftY) >= 0.2 && (mElevatorState == kStopped || mElevatorState == kManualMove) && toteHeight <= 4 && toteHeight >= 0)
	{
		mElevatorMotor->Set(leftY);
		mElevatorState = kManualMove;
	}
	else if(fabs(leftY) < 0.2 && mElevatorState == kManualMove)
	{
		mElevatorMotor->Set(0);
		mElevatorState = kStopped;
	}
	else if(rightTriggerUp >= 0.85 && mElevatorState == kStopped && toteHeight < 4)
	{
		mElevatorMotor->Set(0.3);
		mElevatorState = kAutoMovingUp;
		mToteStop = (int) (toteHeight + 1);
	}
	else if(mElevatorState == kAutoMovingUp && toteHeight >= mToteStop)
	{
		mElevatorMotor->Set(0);
		mElevatorState = kStopped;
	}
	else if(leftTriggerDown >= 0.85 && mElevatorState == kStopped && toteHeight > 0)
	{
		mElevatorMotor->Set(-0.3);
		mElevatorState = kAutoMovingDown;
		mToteStop = (int) (toteHeight - 1);
	}
	else if(mElevatorState == kAutoMovingDown && toteHeight <= mToteStop)
	{
		mElevatorMotor->Set(0);
		mElevatorState = kStopped;
	}
}

bool Elevator::ApproachTote()
{
	double elevatorHeight = mPot->Get();
	bool isDoneApproaching = false;

	if(elevatorHeight > 0.2)
	{
		mElevatorMotor->Set(0.2); //should be faster
		return isDoneApproaching;
	}
	else
	{
		mElevatorMotor->Set(0.0);
	}

	isDoneApproaching = mDriveClass->DriveUntilClose();
	return isDoneApproaching;
}

bool Elevator::PickUpTote()
{
	double elevatorHeight = mPot->Get();
	bool isDoneLifting = false;

	if(elevatorHeight < 1)
	{
		mElevatorMotor->Set(-0.2); //should be faster
	}
	else
	{
		isDoneLifting = true;
		mElevatorMotor->Set(0.0);
	}
	return isDoneLifting;
}

void Elevator::ToteLevel(ElevatorState Direction)
{
	double toteHeight = mPot->Get();
	if (Direction == kAutoMovingUp)
	{
		if(Direction == kAutoMovingUp && toteHeight < 4)
		{
			mElevatorMotor->Set(0.3);
			mToteStop = (int) (toteHeight + 1);
		}
		if(Direction == kAutoMovingUp && toteHeight >= mToteStop)
		{
			mElevatorMotor->Set(0);
			Direction = kStopped;
		}
	}
	else if (Direction == kAutoMovingDown)
	{
		if(Direction == kAutoMovingDown && toteHeight > 0)
		{
			mElevatorMotor->Set(-0.3);
			mToteStop = (int) (toteHeight - 1);
		}
		else if(Direction == kAutoMovingDown && toteHeight <= mToteStop)
		{
			mElevatorMotor->Set(0);
			Direction = kStopped;
		}
	}
}

void Elevator::AddToteToStack()
{
	double toteHeight;
	//toteHeight = mPot->Get();
	//double startingToteHeight = mPot->Get();
	//.16 is about two inches down
	//while (toteHeight > startingToteHeight - 0.16 )      //Move down two inches
	//{
		//toteHeight = mPot->Get();
		mElevatorMotor->Set(-0.5);
	//}
	Wait(1.0);
		mElevatorMotor->Set(0);
	Wait(0.09);
	mDriveClass->DriveDistWithEncoder(4, -1);
	//while (toteHeight > 0.1)
	//{
		//toteHeight = mPot->Get();
		mElevatorMotor->Set(-0.5);
	//}
	mDriveClass->DriveDistWithEncoder(4, 1);
	//while (mPot->Get() < 2.2)
	//{
		mElevatorMotor->Set(0.5);
	//}
		Wait(1.0);
	mElevatorMotor->Set(0);
}

void Elevator::TestElevator() //by Mark
{
	//double toteHeight = mPot->Get();
	for(int x = 0; x < 20; x++)
		printf("\n");

	printf("***Elevator Test***\n");
	printf("Right Stick Up: Move Elevator Up\n");
	printf("Right Stick Down: Move Elevator Down\n");
	printf("Press X to exit elevator test\n");
	while(mXbox->GetRawButton(XBOX_X_BUTTON) == false)
	{
#ifdef STRING_POT
		float ElevatorTest_Stick = mXbox->GetRawAxis(XBOX_RIGHT_Y_AXIS);
		if (fabs(mXbox->GetRawAxis(XBOX_RIGHT_Y_AXIS)) > 0.2 && toteHeight <= 4 && toteHeight >= 0)
		{
			mElevatorMotor->Set(ElevatorTest_Stick);
		}
		if (mXbox->GetRawButton(XBOX_X_BUTTON) == 1)
		{
			ElevatorTestDone = true;
		}
		if (mXbox->GetRawAxis(XBOX_LEFT_TRIGGER_AXIS) > 0.5)
		{
			while (mXbox->GetRawAxis(XBOX_LEFT_TRIGGER_AXIS) > 0.5)
			{}
			ToteLevel(kAutoMovingDown);
		}
		if (mXbox->GetRawAxis(XBOX_RIGHT_BUMPER) == 1)
		{
			while (mXbox->GetRawAxis(XBOX_RIGHT_BUMPER) == 1)
			{}
			ToteLevel(kAutoMovingUp);
		}
#else
		float ElevatorTest_Stick = mXbox->GetRawAxis(XBOX_RIGHT_Y_AXIS);
		if (fabs(mXbox->GetRawAxis(XBOX_RIGHT_Y_AXIS)) > 0.2)
		{
			mElevatorMotor->Set(ElevatorTest_Stick);
		}
		else
		{
			mElevatorMotor->Set(0.0);
		}
#endif
	}
}

#endif
